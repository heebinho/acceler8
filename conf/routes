# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


GET     /                           controllers.HomeController.index

GET     /dashboard/callback         controllers.DashboardController.callback(state: String, code: String)
GET		/dashboard					controllers.DashboardController.index

POST    /login                      controllers.HomeController.authenticate()
GET     /logout                     controllers.HomeController.logout()

GET     /settings                   controllers.account.settings.IndexController.index()
GET     /settings/password          controllers.account.settings.PasswordController.index()
POST    /settings/password          controllers.account.settings.PasswordController.runPassword()
GET     /settings/email             controllers.account.settings.EmailController.index()
POST    /settings/email             controllers.account.settings.EmailController.runEmail()

# Registers the user, sending an email to confirm the account.
GET     /signup                     controllers.account.SignupController.create()
POST    /signup                     controllers.account.SignupController.save()
# Accessed when the user confirms the registration.
GET     /confirm/:confirmToken      controllers.account.SignupController.confirm(confirmToken:String)

# Displays a page to send a reset email given the user's email.
GET     /reset/ask                  controllers.account.ResetController.ask()
POST    /reset/ask                  controllers.account.ResetController.runAsk()

# Resets the password using the password.
GET     /reset/:token               controllers.account.ResetController.reset(token:String)
POST    /reset/:token               controllers.account.ResetController.runReset(token:String)

GET     /email/:token               controllers.account.settings.EmailController.validateEmail(token:String)


GET		/teams						controllers.TeamController.index
GET		/teams/new					controllers.TeamController.newTeam()
GET		/teams/:id					controllers.TeamController.details(id: Integer)
POST	/teams/join					controllers.TeamController.join()

# w√ºrde ich weglasen und unter myteams machen
POST	/teams						controllers.TeamController.save()
DELETE	/teams/:id					controllers.TeamController.delete(id: Integer)

#Methodes for MyTeams
GET		/myteams					controllers.MyTeamController.index
GET		/myteams/:id				controllers.MyTeamController.details(id: Integer)
POST	/myteams					controllers.MyTeamController.save()
DELETE	/myteams/:id				controllers.MyTeamController.delete(id: Integer)

#Methodes for user challenge
#GET	/userchallenge				controllers.UserChallengeController.index
#POST	/userchallenge				controllers.UserChallengeController.choose()
#GET	/userchallenge/:id			controllers.UserChallangeController.details(id: Integer)

#Methodes for team challenge
#GET	/teamchallenge				controllers.TeamChallengeController.index
#GET	/teamchallenge/:id			controllers.TeamChallangeController.details(id: Integer)

#Testing
GET		/ping						controllers.test.TestController.ping
GET		/echo/:in					controllers.test.TestController.echo(in: String)

# An example controller showing how to use dependency injection
GET     /count                      controllers.CountController.count
# An example controller showing how to write asynchronous code
GET     /message                    controllers.AsyncController.message

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)














#TODO Delete routes
GET	/products					controllers.ProductController.index
GET	/products/new				controllers.ProductController.newProduct()
GET	/products/:ean				controllers.ProductController.details(ean: String)
POST	/products					controllers.ProductController.save()
DELETE	/products/:ean				controllers.ProductController.delete(ean: String)

